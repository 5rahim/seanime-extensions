{
  "id": "weebcentral",
  "name": "WeebCentral",
  "version": "1.0.0",
  "manifestURI": "https://raw.githubusercontent.com/5rahim/seanime-extensions/refs/heads/main/manga-providers/weebcentral/weebcentral.json",
  "language": "typescript",
  "type": "manga-provider",
  "description": "",
  "author": "Seanime",
  "icon": "https://raw.githubusercontent.com/5rahim/hibike/main/icons/weebcentral.png",
  "website": "",
  "lang": "en",
  "payload": "/// <reference path=\"../manga-provider.d.ts\" />\n/// <reference path=\"../../core.d.ts\" />\n\nclass Provider implements MangaProvider {\n    private url: string = \"https://weebcentral.com\"\n\n    private async fetch(url: string, options: RequestInit = {}): Promise<Response> {\n        const defaultHeaders = {\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36\",\n        }\n\n        const mergedOptions: RequestInit = {\n            ...options,\n            headers: {\n                ...defaultHeaders,\n                ...options.headers,\n            },\n        }\n\n        return fetch(url, mergedOptions)\n    }\n\n    async search({ query }: QueryOptions): Promise<SearchResult[]> {\n        const searchUrl = `${this.url}/search/simple?location=main`\n        const form = new URLSearchParams()\n        form.set(\"text\", query)\n\n        const response = await this.fetch(searchUrl, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n                \"HX-Request\": \"true\",\n                \"HX-Trigger\": \"quick-search-input\",\n                \"HX-Trigger-Name\": \"text\",\n                \"HX-Target\": \"quick-search-result\",\n                \"HX-Current-URL\": `${this.url}/`,\n            },\n            body: form.toString(),\n        })\n\n        const text = await response.text()\n        const $ = LoadDoc(text)\n\n        const searchResults: SearchResult[] = []\n\n        $(\"#quick-search-result > div > a\").each((i, el) => {\n            const link = el.attr(\"href\")\n            if (!link) return\n\n            const title = el.find(\".flex-1\").text().trim()\n\n            let image = \"\"\n            const sourceElement = el.find(\"source\")\n            if (sourceElement.length() > 0) {\n                image = sourceElement.attr(\"srcset\") || \"\"\n            } else {\n                const imgElement = el.find(\"img\")\n                if (imgElement.length() > 0) {\n                    image = imgElement.attr(\"src\") || \"\"\n                }\n            }\n\n            const idPartMatch = link.match(/\\/series\\/([^/]+)/)\n            if (!idPartMatch || !idPartMatch[1]) return\n\n            const id = idPartMatch[1]\n\n            // Simple rating based on title match\n            if (title.toLowerCase().includes(query.toLowerCase())) {\n                searchResults.push({\n                    id: id,\n                    title: title,\n                    synonyms: [],\n                    year: 0,\n                    image: image,\n                })\n            }\n        })\n\n        return searchResults\n    }\n\n\n    async findChapters(mangaId: string): Promise<ChapterDetails[]> {\n        const chapterUrl = `${this.url}/series/${mangaId}/full-chapter-list`\n\n        const response = await this.fetch(chapterUrl, {\n            headers: {\n                \"HX-Request\": \"true\",\n                \"HX-Target\": \"chapter-list\",\n                \"HX-Current-URL\": `${this.url}/series/${mangaId}`,\n                \"Referer\": `${this.url}/series/${mangaId}`,\n            },\n        })\n\n        const text = await response.text()\n        const $ = LoadDoc(text)\n\n        const chapters: ChapterDetails[] = []\n        const chapterRegex = /(\\d+(?:\\.\\d+)?)/\n\n        $(\"div.flex.items-center\").each((i, el) => {\n            const a = el.find(\"a\")\n            if (!a) return\n\n            const chapterUrl = a.attr(\"href\")\n            if (!chapterUrl) return\n\n            const chapterTitle = a.find(\"span.grow > span\").first().text().trim()\n\n            let chapterNumber = \"\"\n            const match = chapterTitle.match(chapterRegex)\n            if (match && match[1]) {\n                chapterNumber = String(parseFloat(match[1]))\n            }\n\n            const chapterIdMatch = chapterUrl.match(/\\/chapters\\/([^/]+)/)\n            if (!chapterIdMatch || !chapterIdMatch[1]) return\n\n            const chapterId = chapterIdMatch[1]\n\n            chapters.push({\n                id: chapterId,\n                url: chapterUrl,\n                title: chapterTitle,\n                chapter: chapterNumber,\n                index: 0, // Will be set later\n            })\n        })\n\n        // Reverse to have chapters in ascending order\n        chapters.reverse()\n\n        // Set the correct index after reversing\n        chapters.forEach((chapter, i) => {\n            chapter.index = i\n        })\n\n        return chapters\n    }\n\n\n    async findChapterPages(chapterId: string): Promise<ChapterPage[]> {\n        const url = `${this.url}/chapters/${chapterId}/images?is_prev=False&reading_style=long_strip`\n\n        const response = await this.fetch(url, {\n            headers: {\n                \"HX-Request\": \"true\",\n                \"HX-Current-URL\": `${this.url}/chapters/${chapterId}`,\n                \"Referer\": `${this.url}/chapters/${chapterId}`,\n            },\n        })\n\n        const text = await response.text()\n        const $ = LoadDoc(text)\n\n        let pages: ChapterPage[] = []\n\n        $(\"section.flex-1 img\").each((i, el) => {\n            const imageUrl = el.attr(\"src\")\n            if (imageUrl) {\n                pages.push({\n                    url: imageUrl,\n                    index: i,\n                    headers: { \"Referer\": this.url },\n                })\n            }\n        })\n\n        // Fallback if the main selector doesn't find images\n        if (pages.length === 0 && $(\"img\").length() > 0) {\n            $(\"img\").each((i, el) => {\n                const imageUrl = el.attr(\"src\")\n                if (imageUrl) {\n                    pages.push({\n                        url: imageUrl,\n                        index: i,\n                        headers: { \"Referer\": this.url },\n                    })\n                }\n            })\n        }\n\n        return pages\n    }\n\n    getSettings(): Settings {\n        return {\n            supportsMultiLanguage: false,\n            supportsMultiScanlator: false,\n        }\n    }\n}\n"
}
