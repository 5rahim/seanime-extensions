{
  "id": "mangapill",
  "name": "Mangapill",
  "version": "1.0.0",
  "manifestURI": "https://raw.githubusercontent.com/5rahim/seanime-extensions/refs/heads/main/manga-providers/mangapill/mangapill.json",
  "language": "typescript",
  "type": "manga-provider",
  "description": "",
  "author": "Seanime",
  "icon": "https://raw.githubusercontent.com/5rahim/hibike/main/icons/mangapill.png",
  "website": "",
  "lang": "en",
  "payload": "/// <reference path=\"../manga-provider.d.ts\" />\n/// <reference path=\"../../core.d.ts\" />\n\nclass Provider {\n    private url: string = \"https://mangapill.com\"\n\n    async search({ query }: QueryOptions): Promise<SearchResult[]> {\n        const searchUrl = `${this.url}/search?q=${encodeURIComponent(query)}`\n        const response = await fetch(searchUrl)\n        const text = await response.text()\n        const $ = LoadDoc(text)\n\n        const results: SearchResult[] = []\n\n        $(\"div.container div.my-3.justify-end > div\").each((i, element) => {\n            const link = element.find(\"a\").attr(\"href\")\n            if (!link) return\n\n            const id = link.split(\"/manga/\")[1].replace(/\\//g, \"$\")\n            const title = element.find(\"div > a > div.mt-3\").text().trim()\n            const altTitlesText = element.find(\"div > a > div.text-xs.text-secondary\").text().trim()\n            const synonyms = altTitlesText ? [altTitlesText] : []\n            const image = element.find(\"a img\").attr(\"data-src\")\n            const yearStr = element.find(\"div > div.flex > div\").eq(1).text().trim()\n            const year = parseInt(yearStr, 10) || 0\n\n            results.push({\n                id,\n                title,\n                synonyms,\n                image: image || \"\",\n                year,\n            })\n        })\n\n        return results\n    }\n\n    async findChapters(mangaId: string): Promise<ChapterDetails[]> {\n        const uriId = mangaId.replace(/\\$/g, \"/\")\n        const url = `${this.url}/manga/${uriId}`\n        const response = await fetch(url)\n        const text = await response.text()\n        const $ = LoadDoc(text)\n\n        const chapters: ChapterDetails[] = []\n\n        $(\"div.container div.border-border div#chapters div.grid-cols-1 a\").each((i, element) => {\n            const href = element.attr(\"href\")\n            if (!href) return\n\n            const id = href.split(\"/chapters/\")[1].replace(/\\//g, \"$\")\n            const title = element.text().trim()\n            const chapterMatch = title.match(/Chapter\\s+([\\d.]+)/)\n            const chapterNumber = chapterMatch ? chapterMatch[1] : \"\"\n\n            chapters.push({\n                id,\n                title,\n                url: \"\",\n                chapter: chapterNumber,\n                index: 0, // Will be set later\n            })\n        })\n\n        chapters.reverse()\n        chapters.forEach((chapter, index) => {\n            chapter.index = index\n        })\n\n        return chapters\n    }\n\n    async findChapterPages(chapterId: string): Promise<ChapterPage[]> {\n        const uriId = chapterId.replace(/\\$/g, \"/\")\n        const url = `${this.url}/chapters/${uriId}`\n        const response = await fetch(url)\n        const text = await response.text()\n        const $ = LoadDoc(text)\n\n        const pages: ChapterPage[] = []\n\n        $(\"chapter-page\").each((i, element) => {\n            const imageUrl = element.find(\"div picture img\").attr(\"data-src\")\n            if (!imageUrl) return\n\n            const indexStr = element.find(\"div[data-summary] > div\").text()\n            const indexMatch = indexStr.match(/page\\s+(\\d+)/)\n            const index = indexMatch ? parseInt(indexMatch[1], 10) - 1 : i\n\n            pages.push({\n                url: imageUrl,\n                index: index,\n                headers: {\n                    \"Referer\": \"https://mangapill.com/\",\n                },\n            })\n        })\n\n        // Sort by index as a fallback\n        pages.sort((a, b) => a.index - b.index)\n\n        return pages\n    }\n\n    getSettings(): Settings {\n        return {\n            supportsMultiLanguage: false,\n            supportsMultiScanlator: false,\n        }\n    }\n}\n"
}
